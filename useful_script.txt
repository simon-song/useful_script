=========================================================
==                   UNIX
=========================================================

>>>  Check whether a shared library .so is x86 or x64:
  $ file libboost_system.so

>>>  search recursively a string using grep
  $ grep --include="*.*" -nRHI "SwapRate" *

>>>  look for a file
  $ find . -name "filename"

>>>  look for the location of a command
  $ whereis gcc

>>>  check glibc version
  $ ldd --version

>>> check number of CPU cores
  $ nproc --all

>>> install gcc-6.3.0

$ wget http://ftp.gnu.org/gnu/gcc/gcc-6.3.0/gcc-6.3.0.tar.bz2
$ tar xvfj gcc-6.3.0.tar.bz2
$ cd gcc-6.3.0
$ ./contrib/download_prerequisites
$ mkdir build
$ cd build
$ ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib
$ make  # this may take 1.5 hours
$ sudo make install  # will be installed at /usr/local/lib64

In case download is not allowed, copy files gmp-4.3.2.tar.bz2, isl-0.15.tar.bz2,
mpc-0.8.1.tar.gz, mpfr-2.4.2.tar.bz2 to directory gcc-6.3.0, uncompress, then
create a soft link for each directory:
$ ln -s gmp-4.3.2 gmp # similarly for isl, mpc, mpfr

>>> scp
$ scp -P port -r file_or_dir username@120.24.6.34:/home/pengcheng

>>> check Linux distribution version
$ lsb_release -a


=========================================================
==                    git 
=========================================================

>>> update workspace
  $ git fetch
  $ git pull

>>> commit changes
  $ git add foo.txt
  $ git commit -m "Changed foo.txt"
  $ git push

>>> store user name & password after first use
  $ git config credential.helper store

>>> reset (discard changes) of a file
  $ git checkout foo.txt

>>> select a particular file from another branch
  $ git fetch
  $ git checkout origin/dev src/instrument/fixedratebond.cpp -p

>>> change the URL for a remote Git repository
  $ git remote -v
  $ git remote set-url origin https://github.com/usr/newrepo.git

=========================================================
==                    python 3
=========================================================
>>> start a web server (must use --bind on WIN 10)
  $ python -m http.server --bind 127.0.0.1

>>> start a web server on Mac OS X (i.e. localhost:8000):
  $ python -m SimpleHTTPServer 8000


=========================================================
==                    vim 
==
==   See also http://www.rayninfo.co.uk/vimtips.html
=========================================================

>>>  remove all digits:
  :%s/\d*//g

>>>  remove all blank lines:
  :g/^$/d

>>>  add \\ at the end of each line:
  :11,887s/$/ \\\\/g

>>>  remove all lines except those with "Large":
  :v/Large/d

>>> change current word to capitals: gUw

>>> match 1 plus 3 more digits: /1\(\d\{3\}\)

>>> add % to the beginning of every line:
  :11,887s/^/%/g

>>> insert a blank line every 3 lines
   :%s/\v(.*\n){3}/&\r

>>> to fix error "Not an editor command: ^M": save the file using
   :w ++ff=unix


=========================================================
==                   perl 
=========================================================
>>> find text starting with alphabeta then a digit then a punctuation mark
>>> and remove the digit
  $ perl -p -e 's/([a-z])([0-9])([,.:;?])/\1\3/g;' a.txt >a_out.txt


=========================================================
==                   Windows 
=========================================================

>>> If textlive runs slowly on windows when loading fonts, run fc-cache.exe as
administrator may solve it.


=========================================================
==                   Excel 
=========================================================

>>> If an formula uses TRANSPOSE function, then one must use CTRL+SHIFT+ENTER
to run it even if the final result is of only one cell.


=========================================================
==                  Visual Studio + C++ 
=========================================================

>>> FRQF dependencies

(1) boost libraries, both 32 bit and 64 bit built; recommended version 1_61_0 as
mathparser was pre-built using this version. (The x64-Debug version of
mathparser may need to be rebuilt to eliminate link error.)

(2) nlopt, need to be built 
  (2.1) 32 bit build
     $ mkdir build_vs2015_x86
     $ cd build_vs2015_x86
     $ cmake ..
     then open nlopt.sln and build the solution.
  (2.2) 64 bit build
     $ mkdir build_vs2015_x64
     $ cd build_vs2015_x64
     $ cmake .. -G"Visual Studio 14 Win64"
     then open nlopt.sln and build the solution.

(3) xlw
   (3.1) Download xlw-5.0.2f0.exe from xlw.sourceforge.net
   (3.2) Without installing it, open it with 7z, unzip directory xlw/, then
        $ cd xlw/build
        $ cp -r vc12 vc14
        $ cd vc14
   (3.3) open xlw.sln with Visual Studio 2015, change
   General->TargetName and Librarian->General to vc140 (from vc120),
   then build the library (x86 Debug/Release, x64 Debug/Release).
   The static libraries will be put at xlw/lib and xlw/lib/x64.

>>> asmjit

Be aware whether the library is built using ASMJIT_STATIC flag.

>>> SCIP (to be used in Visual Studio 2015)

(1) download SCIPOptSuite-6.0.1-win64-VS15.exe from scip.zib.de and install it
(at "C:\Program Files\SCIPOptSuite 6.0.1").

(2) In your own Visual Studio 2015 project, 
add "C:\Program Files\SCIPOptSuite 6.0.1\include" to "Include Directories", 
add "C:\Program Files\SCIPOptSuite 6.0.1\lib" to "Library Directories",
and add "scip.lib" to Linker->Input, then compile your code (e.g. queens.cpp
included in the SCIP examples).

(3) Copy 
"C:\Program Files\SCIPOptSuite 6.0.1\bin\scip.dll" to x64\Release of your
project. Now you are ready to go.


=========================================================
==                   PDF
=========================================================

>>> to break a pdf with 2 pages in one (may need Linux)
    $ mutool poster -x 2 a.pdf a_out.pdf

