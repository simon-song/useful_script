=========================================================
==                   UNIX
=========================================================

>>>  Check whether a shared library .so is x86 or x64:
  $ file libboost_system.so

>>>  search recursively a string using grep
  $ grep --include="*.*" -nRHI "SwapRate" *

>>>  look for a file
  $ find . -name "filename"

>>> find out the number of files recursively in a directory
  $ find . -name "*pp" | wc -l

>>> find out the total number of lines of all files recursively in a directory
  $ find . -name "*pp" | xargs cat | wc -l

>>>  look for the location of a command
  $ whereis gcc

>>>  check glibc version
  $ ldd --version

>>> check number of CPU cores
  $ nproc --all

>>> install gcc-7.4.0

  $ wget http://ftp.gnu.org/gnu/gcc/gcc-7.4.0/gcc-7.4.0.tar.gz
  $ tar xvfz gcc-7.4.0.tar.gz
  $ cd gcc-7.4.0
  $ ./contrib/download_prerequisites
  $ mkdir build
  $ cd build
  $ ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib
  $ make  # this may take 1.5 hours
  $ sudo make install  # will be installed at /usr/local/lib64

In case download is not allowed, copy files gmp-4.3.2.tar.bz2, isl-0.15.tar.bz2,
mpc-0.8.1.tar.gz, mpfr-2.4.2.tar.bz2 to directory gcc-6.3.0, uncompress, then
create a soft link for each directory:
  $ ln -s gmp-4.3.2 gmp # similarly for isl, mpc, mpfr

>>>  install boost_1_74_0 from source
   $ tar xvfz boost_1_74_0.tar.gz
   $ cd boost_1_74_0
   $ ./bootstrap.sh
   $ ./b2
   $ sudo ./b2 install

>>> jdpl on Linux (e.g. Centos)
   $ git clone https://jcode.jdfmgt.com/git/jda.jdpl.git
   $ cd jdpl
   $ git checkout develop  # switch to branch "develop"
   $ mkdir build_release
   $ cd build_release
   $ cmake3 -DCMAKE_BUILD_TYPE=Release ..
   $ make
   
You may need zlib to be installed on Centos:
   $ sudo yum install zlib zlib-devel

FFTW needs to be built using -fPIC:
   $ cd fftw-3.3.8
   $ mkdir build_release
   $ cd build_release
   $ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-fPIC" ..
   $ make

>>> install different gcc toolsets on centos
  $ sudo yum install centos-release-scl
  $ sudo yum install devtoolset-10-gcc devtoolset-10-gcc-c++    
  $ scl enable devtoolset-10 -- bash      # enable gcc10 in shell

>>> check libstdc++ version
  $ strings /usr/lib64/libstdc++.so.6  |  grep LIBCXX

>>> scp
  $ scp -P port -r file_or_dir username@120.24.6.34:/home/pengcheng

>>> check Linux distribution version
  $ lsb_release -a

>>> check whether an object file contains reference to a particular function
  $ objdump -t calendar.cpp.o | grep Adjust

>>> check whether a library file is debug build
  $ objdump --syms libJdaQuant.so | grep debug

>>> redirect report of boost.test to a file
  $ ./test --report_level=detailed --report_sink=a.log

=========================================================
==                    git 
=========================================================

>>> update workspace
  $ git fetch
  $ git pull

>>> commit changes
  $ git add foo.txt
  $ git commit -m "Changed foo.txt"
  $ git push

>>> remove old user name and password
  $ git config --global --unset credential.helper

>>> store user name & password after first use
  $ git config credential.helper store

>>> reset (discard changes) of a file
  $ git checkout foo.txt

>>> select a particular file from another branch
  $ git fetch
  $ git checkout origin/dev src/instrument/fixedratebond.cpp -p

>>> change the URL for a remote Git repository
  $ git remote -v
  $ git remote set-url origin https://github.com/usr/newrepo.git

>>> To fix "error: RPC failed; result=22, HTTP code = 411"
  $ git config http.postBuffer *bytes*
  $ git config http.postBuffer 524288000 # for 500MB

>>> branching (see https://github.com/joshnh/Git-Commands)
  $ git branch      # list branches (the * denotes the current branch)
  $ git branch -a   # list all branches (local and remote)
  $ git branch [BRANCH_NAME]     # create a new branch
  $ git branch -d [BRANCH_NAME]  # delete a branch
  $ git checkout [BRANCH_NAME]   # swith to a branch
  $ git push -u origin [BRANCH_NAME]   # push local branch to the remote repository
  
 >>> undoing last shared public changes (see also 
 https://www.atlassian.com/git/tutorials/undoing-changes)
   
   $ git revert HEAD
 

=========================================================
==                    python 3
=========================================================
>>> start a web server (must use --bind on WIN 10)
  $ python -m http.server --bind 127.0.0.1

>>> start a web server on Mac OS X (i.e. localhost:8000):
  $ python -m SimpleHTTPServer 8000


=========================================================
==                    vim 
==
==   See also http://www.rayninfo.co.uk/vimtips.html
=========================================================

>>>  remove all digits:
  :%s/\d*//g

>>>  remove all blank lines:
  :g/^$/d
  
>>>  replace newline by space
  :%s/\n/ /g

>>>  add \\ at the end of each line:
  :11,887s/$/ \\\\/g

>>>  remove all lines except those with "Large":
  :v/Large/d

>>> change current word to capitals: gUw

>>> change all words to lowercase: guG

>>> wrap text to 80 characters: gqG

>>> match 1 plus 3 more digits: /1\(\d\{3\}\)

>>> match [ then 2 digits then dot (.) then ]: /\[\d\{2}\.\]

>>> add % to the beginning of every line:
  :11,887s/^/%/g

>>> insert a blank line every 3 lines
   :%s/\v(.*\n){3}/&\r

>>> to fix error "Not an editor command: ^M": save the file using
   :w ++ff=unix

>>> remove all punctuation
   $ cat in.txt | tr -d '[:punct:]' >out.txt
   
>>>  remove text after : in each line  (see https://stackoverflow.com/questions/24111723/delete-all-characters-after-in-each-line/24112519)
   :%s/[^:]*$//
   
>>> virtual editing
(https://medium.com/usevim/vim-101-virtual-editing-661c99c05847)
  :set ve=block
	
back to the normal visual mode:
  : set ve=all


=========================================================
==                   perl 
=========================================================
>>> find text starting with alphabeta then a digit then a punctuation mark
>>> and remove the digit
  $ perl -p -e 's/([a-z])([0-9])([,.:;?])/\1\3/g;' a.txt >a_out.txt


=========================================================
==                   Windows 
=========================================================

>>> If textlive runs slowly on windows when loading fonts, run fc-cache.exe as
administrator may solve it.


=========================================================
==                   Excel 
=========================================================

>>> If an formula uses TRANSPOSE function, then one must use CTRL+SHIFT+ENTER
to run it even if the final result is of only one cell.

>>> To insert multiple rows, select several rows, type Shift+space, then right click and click 
on Insert.

=========================================================
==                   CMake
==
==  see https://nlopt.readthedocs.io/en/latest/NLopt_Installation/
==  for example of building nlopt using CMake
=========================================================

>>> for MacOS / Linux
   $ cmake -DCMAKE_BUILD_TYPE=Release -H"$(pwd)" -B"$(pwd)/cmake-build-release"
   $ cmake -DCMAKE_BUILD_TYPE=Debug -H"$(pwd)" -B"$(pwd)/cmake-build-debug"
   $ cd cmake-build-release
   $ make

>>> for Visual Studio 2015
   $ cmake -G"Visual Studio 14 2015" -A x64 -B"cmake-vs2015"

>>> for Visual Studio 2019
   $ cmake -G "Visual Studio 16 2019" -A x64 -B"cmake-vs2019"

>>> for Visual Studio 2022
   $ cmake -G "Visual Studio 17 2022" -A x64 -B"build-vs2022"

>>> to make a Release build
   $ cmake -DCMAKE_BUILD_TYPE=Release ..

>>> to build a static library 
   $ cmake -DBUILD_SHARED_LIBS=OFF ..


=========================================================
==                  Visual Studio + C++ 
=========================================================

>>> JDPL installation 

Suppose the directory for JDPL is foo\jdpl. boost libraries must be 
installed at foo\boost_1_74_0

(1) set environment variable BOOST_ROOT and BOOST_INCLUDEDIR to
foo\boost_1_74_0

(2) get the code and switch to branch "develop"

   $ git clone https://jcode.jdfmgt.com/git/jda.jdpl.git
   $ git checkout develop

(3) run cmake (using e.g. powershell)

   $ cd foo\jdpl
   $ cmake -G "Visual Studio 16 2019" -A x64 -B"cmake-vs2019"

this will create jdpl.sln at foo\jdpl\cmake-vs2019.

(4) open jdpl.sln with Visual Studio 2019 and compile the code.


>>> FRQF dependencies

(1) boost libraries, both 32 bit and 64 bit built; recommended version 1_61_0 as
mathparser was pre-built using this version. (The x64-Debug version of
mathparser may need to be rebuilt to eliminate link error.)

(2) nlopt, need to be built 
  (2.1) 32 bit build
     $ mkdir build_vs2015_x86
     $ cd build_vs2015_x86
     $ cmake ..
     then open nlopt.sln and build the solution.
  (2.2) 64 bit build
     $ mkdir build_vs2015_x64
     $ cd build_vs2015_x64
     $ cmake .. -G"Visual Studio 14 Win64"
     then open nlopt.sln and build the solution.

(3) xlw
   (3.1) Download xlw-5.0.2f0.exe from xlw.sourceforge.net
   (3.2) Without installing it, open it with 7z, unzip directory xlw/, then
        $ cd xlw/build
        $ cp -r vc12 vc14
        $ cd vc14
   (3.3) open xlw.sln with Visual Studio 2015, change
   General->TargetName and Librarian->General to vc140 (from vc120),
   then build the library (x86 Debug/Release, x64 Debug/Release).
   The static libraries will be put at xlw/lib and xlw/lib/x64.

>>> asmjit

Be aware whether the library is built using ASMJIT_STATIC flag.

>>> SCIP (to be used in Visual Studio 2015)

(1) download SCIPOptSuite-6.0.1-win64-VS15.exe from scip.zib.de and install it
(at "C:\Program Files\SCIPOptSuite 6.0.1").

(2) In your own Visual Studio 2015 project, 
add "C:\Program Files\SCIPOptSuite 6.0.1\include" to "Include Directories", 
add "C:\Program Files\SCIPOptSuite 6.0.1\lib" to "Library Directories",
and add "scip.lib" to Linker->Input, then compile your code (e.g. queens.cpp
included in the SCIP examples).

(3) Copy 
"C:\Program Files\SCIPOptSuite 6.0.1\bin\scip.dll" to x64\Release of your
project. Now you are ready to go.


=========================================================
==              LAPACK + Windows 
=========================================================

Adapted from 
https://icl.cs.utk.edu/lapack-for-windows/lapack/index.html#build

>>> build LAPACK 3.10.0 on Windows with Intel compilers 2021.2:

Requires:
Intel oneAPI compilers version 2021.2 (later versions might fail to build with 
Fortran ABI info detection error). To download this old version see:
https://community.intel.com/t5/Intel-oneAPI-Registration/Where-can-I-find-older-versions-2021-2-of-Intel-OneAPI-Base-and/m-p/1298789

(1) Download lapack 3.10.0 from the netlib website
(2) Download and install cmake.
(3) Open cmake-gui, select source directory and build directory, then click
"Configure".
(4) Add "Intel C++ Compiler 19.2" to the "Optional toolset to use" box, 
select "Specify native compilers", then click "Next".
(5) Choose the appropriate Intel compilers, e.g. on my machine, it is
"D:/Program Files (x86)/oneAPI/compiler/2021.2.0/windows/bin/intel64/ifort.exe"
for the Fortran compiler, and "icl.exe" for C and C++. Then click "Finish".
(6) You may have to click "Configure" multiple times until every thing becomes
white. Remember to select "LAPACKE" for the C-interface.
(7) Click "Generate", this will create the Visual Studio Solution.
(8) Go to your "build" directory, open "LAPACK.sln", build the solution, and the
library files (blas.lib, lapack.lib, lapacke.lib, tmglib.lib) will be in 
"build/lib/Release".

###   lapack_cmake_1.png about here   ###
###   lapack_cmake_2.png about here   ###
###   lapack_cmake_3.png about here   ###

To use these library files in Visual Studio without Intel compiler, you may need
to link to several Intel libraries (included in LAPACKE_examples_x64 project).


=========================================================
==                   PDF
=========================================================

>>> to break a pdf with 2 pages in one (may need Linux)
    $ mutool poster -x 2 a.pdf a_out.pdf
	
>>>  adjust the brightness and contrast of a scanned PDF file

echo "convert .pdf into a series of png ..."
"C:/Program Files/ImageMagick-7.0.10-Q16-HDRI/convert.exe" -density 300 -resize
25% a.pdf a.png

echo "adjust the brightness and contrast of images ..."
for ((num=1; num<=475; num++))
do
  tmp=$(printf "%03d" ${num})
  origFile='a-'${tmp}'.png'
  targetFile='b-'${tmp}'.png'
  echo "processing ${origFile} file ..."
  echo ${targetFile}
  "C:/Program Files/ImageMagick-7.0.10-Q16-HDRI/convert.exe" -brightness-contrast 40x20 ${origFile} ${targetFile}
done

echo "convert png files to one pdf ..."
"C:/Program Files/ImageMagick-7.0.10-Q16-HDRI/convert.exe" b-*.png c.pdf

>>> pdftk examples

pdftk wealth_of_nations_v1.pdf cat 1-end 77 output a1.pdf     # add blank page (p.77) to the end
pdftk wealth_of_nations_v2.pdf cat 10-545 output a2.pdf
pdftk a1.pdf a2.pdf cat output a.pdf                                   # combine a1 and a2
pdftk a.pdf cat 4-450 output wm_p1.pdf                            # first part: book 1, 2
pdftk a.pdf cat 76-82 77 77 451-763 output wm_p2.pdf   # second part: book 3,4
pdftk a.pdf cat 76-82 77 764-end output wm_p3.pdf        # third part: book 5, index


=========================================================
==                   Mac OS X
=========================================================

>>> set homebrew mirrors

$ cd "$(brew --repo)"
$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git

$ cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git

$ cd "$(brew --repo)/Library/Taps/homebrew/homebrew-cask"
$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git

$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile
$ source ~/.bash_profile

$ brew update

>>>  install boost_1_74_0 from source with g++-11
   $ tar xvfz boost_1_74_0.tar.gz
   $ cd boost_1_74_0
   $ ./bootstrap.sh
   $ echo "using darwin : 11.2 : /usr/local/bin/g++-11 ; " >> tools/build/src/user-config.jam
   $ ./b2 --toolset=darwin-11.2
   $ sudo ./b2 install
See also https://stackoverflow.com/questions/5346454/building-boost-with-different-gcc-version/5346531#5346531


=========================================================
==     user rules for PAC
=========================================================

Example:
@@||yourwebsite.com^

sudo
